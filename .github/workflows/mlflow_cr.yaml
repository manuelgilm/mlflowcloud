name: Create MLflow Cloud Resources
# env: 
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}
#   ACTIONS_ID_TOKEN_REQUEST_URL: ${{ secrets.ACTIONS_ID_TOKEN_REQUEST_URL }}
env:
  RESOURCE_GROUP_NAME: "mlflowcloudrg"
  STORAGE_ACCOUNT_NAME: "mlflowcloudstrg"
  BLOB_CONTAINER_NAME: "artifact-store"
  AZURE_CONTAINER_REGISTRY_NAME: "mlflowcloudacr"
  AZURE_POSTGRESQL_NAME: "mlflowcloud"
  DATABASE_NAME: "backend-store"
  CONTAINER_APP_NAME: "mlflowcloud"
  CONTAINER_APP_ENV_NAME: "mlflowcloudenv"
  LOCATION: "brazilsouth"
  IMAGE_NAME: "gilsamas/mlflowcloud"
on: 
  push:
    branches: 
      - "main"
      - "master"
    paths:
      - "docker/Dockerfile"

  pull_request:
    branches:
      - "main"
      - "master"
  workflow_dispatch:

jobs: 
  create_resource_group:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Resource Group Exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            # check if resource group exists
            exists=$(az group exists --name $RESOURCE_GROUP_NAME)
            if [ "$exists" = false ]; then
              echo "Resource group $RESOURCE_GROUP_NAME does not exist. Creating..."
              az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
            else
              echo "Resource group $RESOURCE_GROUP_NAME already exists."
            fi

  create_acr:
    needs: create_resource_group
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ACR
        uses: azure/cli@v2
        with:
          inlineScript: |
            # check if ACR exists 
            existing_acr=$(
              az acr list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --query "[?name=='${{ env.AZURE_CONTAINER_REGISTRY_NAME }}'].name" -o tsv
            )
            if [ -z "$existing_acr" ]; then
              echo "ACR $AZURE_CONTAINER_REGISTRY_NAME does not exist. Creating..."
              az acr create --resource-group $RESOURCE_GROUP_NAME --name $AZURE_CONTAINER_REGISTRY_NAME --sku Basic --admin-enabled true
            else
              echo "ACR $AZURE_CONTAINER_REGISTRY_NAME already exists."
            fi

      - name: Build and Push Docker Image to ACR
        uses: azure/cli@v2
        with:
          inlineScript: |
            az acr build \
              --image $IMAGE_NAME \
              --registry $AZURE_CONTAINER_REGISTRY_NAME \
              --image ${{ env.IMAGE_NAME }}:${{ github.sha }} ./docker 
              

  create_storage:
    needs: create_resource_group
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Storage Account
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the storage account already exists
            existing_storage=$(az storage account list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[?name=='${{ env.STORAGE_ACCOUNT_NAME }}'].name" -o tsv)
            if [ -n "$existing_storage" ]; then
              echo "Storage account ${{ env.STORAGE_ACCOUNT_NAME }} already exists."
            else
              echo "Creating storage account: ${{ env.STORAGE_ACCOUNT_NAME }}"
              az storage account create \
                --name ${{ env.STORAGE_ACCOUNT_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
                --location ${{ env.LOCATION }} \
                --sku Standard_LRS
            fi

      - name: Get Storage Account Connection String
        id: get_storage_connection_string
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            connection_string=$(az storage account show-connection-string --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query connectionString -o tsv)
            account_key=$(az storage account keys list --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query '[0].value' -o tsv)
            echo "AZURE_STORAGE_CONNECTION_STRING=$connection_string" >> $GITHUB_OUTPUT
            echo "AZURE_STORAGE_ACCESS_KEY=$account_key" >> $GITHUB_OUTPUT

      - name: Create a Blob Container
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the blob container already exists
            existing_container=$(az storage container list --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --query "[?name=='mlflow-artifacts'].name" -o tsv)
            if [ -n "$existing_container" ]; then
              echo "Blob container '${{ env.BLOB_CONTAINER_NAME }}' already exists."
            else
              echo "Creating blob container: ${{ env.BLOB_CONTAINER_NAME }}"
              az storage container create \
                --name ${{ env.BLOB_CONTAINER_NAME }} \
                --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
                --connection-string "${{ steps.get_storage_connection_string.outputs.connection_string }}" \
                --public-access off
            fi
  create_postgresql:
    needs: create_resource_group
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create a PostgreSQL Server
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the PostgreSQL server already exists
            existing_pg=$(
            az postgres flexible-server list \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "[?name=='${{ env.AZURE_POSTGRESQL_NAME }}'].name" -o tsv
            )
            if [ -n "$existing_pg" ]; then
              echo "PostgreSQL server ${{ env.AZURE_POSTGRESQL_NAME }} already exists."
            else
              echo "Creating PostgreSQL server: ${{ env.AZURE_POSTGRESQL_NAME }}"
              az postgres flexible-server create \
              --name ${{ env.AZURE_POSTGRESQL_NAME }} \
              --admin-display-name ${{ secrets.AZURE_CLIENT_ID }} \
              --admin-type ServicePrincipal \
              --admin-object-id ${{ secrets.AZURE_CLIENT_ID }} \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --location ${{ env.LOCATION }} \
              --sku-name Standard_B1ms \
              --version 14 \
              --tier Burstable \
              --microsoft-entra-auth Enabled \
              --admin-type User \
              --admin-password ${{ secrets.AZ_POSTGRESQL_DB_ADMIN_PASSWORD }} \
              --admin-user ${{ secrets.AZ_POSTGRESQL_DB_ADMIN_USERNAME }} \
              --yes
            fi

            # Monitor status of the server with a timeout of 10 minutes
            echo "Monitoring PostgreSQL server status for up to 10 minutes..."
            max_wait_seconds=600
            wait_interval=15
            elapsed=0
            while true; do
              server_status=$(
                az postgres flexible-server show \
                  --name ${{ env.AZURE_POSTGRESQL_NAME }} \
                  --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
                  --query "state" -o tsv
                )
              if [ "$server_status" = "Ready" ]; then
              echo "PostgreSQL server ${{ env.AZURE_POSTGRESQL_NAME }} is running."
              break
              fi
              if [ "$elapsed" -ge "$max_wait_seconds" ]; then
              echo "Timeout reached: PostgreSQL server ${{ env.AZURE_POSTGRESQL_NAME }} is not running after 10 minutes."
              break
              fi
              echo "Current status: $server_status. Waiting for server to be ready..."
              sleep $wait_interval
              elapsed=$((elapsed + wait_interval))
            done

      - name: Create a PostgreSQL database
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the database already exists
            existing_db=$(
            az postgres flexible-server db list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --server-name ${{ env.AZURE_POSTGRESQL_NAME }} \
              --query "[?name=='${{ env.DATABASE_NAME }}'].name" -o tsv
            )
            if [ -n "$existing_db" ]; then
              echo "Database ${{ env.DATABASE_NAME }} already exists."
            else
              echo "Creating database: ${{ env.DATABASE_NAME }}"
              az postgres flexible-server db create \
              --database-name ${{ env.DATABASE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --server-name ${{ env.AZURE_POSTGRESQL_NAME }}
            fi

  create_container_app:
    needs: 
      - create_resource_group
    runs-on: ubuntu-latest
    steps:
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Container App Environment
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the Container App Environment already exists
            existing_env=$(
              az containerapp env list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --query "[?name=='${{ env.CONTAINER_APP_ENV_NAME }}'].name" -o tsv
            )
            if [ -n "$existing_env" ]; then
              echo "Container App Environment ${{ env.CONTAINER_APP_ENV_NAME }} already exists."
            else
              echo "Creating Container App Environment: ${{ env.CONTAINER_APP_ENV_NAME }}"
              az containerapp env create \
                --name ${{ env.CONTAINER_APP_ENV_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
                --location ${{ env.LOCATION }}
            fi


      - name: Create Container App
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the Container App already exists
            existing_app=$(
              az containerapp list \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --query "[?name=='${{ env.CONTAINER_APP_NAME }}'].name" -o tsv
            )
              
            if [ -n "$existing_app" ]; then
              echo "Container App ${{ env.CONTAINER_APP_NAME }} already exists."
            else
              echo "Creating Container App: ${{ env.CONTAINER_APP_NAME }}"
              az containerapp create \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
                --environment ${{ env.CONTAINER_APP_ENV_NAME }} \
                --ingress external 
            fi

